name: CI

on: [push]

jobs:
  test:
    name: ${{ matrix.run.target }} (${{ matrix.rust }})
    strategy:
      matrix:
        run:
          - target: aarch64-apple-darwin
            tag: macos-latest
            tier_1: false
          - target: x86_64-unknown-linux-gnu
            tag: ubuntu-latest
            tier_1: true
        rust: [stable, nightly]
        exclude:
          - run:
              target: aarch64-apple-darwin
            rust: nightly
        include:
          - nobgt: 0
            no_tests: 0
          # - run:
          #     target: aarch64-unknown-linux-gnu
          #     tag: arm64
          #     tier_1: false
          #   rust: stable
          #   nobgt: 0
          #   no_tests: 1
          # - run:
          #     target: x86_64-apple-darwin
          #     tag: macos-13
          #     tier_1: false
          #   rust: stable
          #   nobgt: 0
          #   no_tests: 1
          - run: 
              target: x86_64-unknown-linux-musl
              tag: ubuntu-latest
              tier_1: false
            rust: stable
            nobgt: 1
            no_tests: 1
    runs-on: ${{ matrix.run.tag }}
    continue-on-error: ${{ ! matrix.run.tier1 }}
    env:
      TARGET: ${{ matrix.run.target }}
      NO_JEMALLOC_TESTS: 0  # ${{ matrix.no_tests }}
      NOBGT: ${{ matrix.nobgt }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: install
      run: |
        if [[ "${{ matrix.rust }}" == "nightly" ]]; then
            rustup default nightly
        fi
        rustup target add ${{ matrix.run.target }}
        if [[ "$TARGET" == "x86_64-unknown-linux-musl" ]]; then
          sudo apt install -y musl-tools
        fi
    - name: test
      run: sh ci/run.sh
  test_bench:
    name: Benchmarks using x86_64-unknown-linux-gnu (nightly)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - run: rustup default nightly
    - run: cargo test --bench roundtrip
  check:
    name: Rustfmt and Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - run: rustup component add rustfmt clippy
    - run: cargo fmt --all -- --check
    - run: cargo clippy -p tikv-jemalloc-sys -- -D clippy::all
    - run: cargo clippy -p tikv-jemallocator -- -D clippy::all
    - run: cargo clippy -p tikv-jemallocator-global -- -D clippy::all
    - run: cargo clippy -p tikv-jemalloc-ctl -- -D clippy::all
    - run: env RUSTDOCFLAGS="--cfg jemallocator_docs" cargo doc
    - run: shellcheck ci/*.sh
